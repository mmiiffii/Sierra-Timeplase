name: Rename Images in /images (uniform: image_YYMMDD_HHMMSS)

on:
  workflow_dispatch:  # run manually from GitHub Actions UI

permissions:
  contents: write

jobs:
  rename:
    runs-on: ubuntu-latest

    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Rename image files
        id: rename
        run: |
          python3 - <<'PYCODE'
          import re, os, csv, time, subprocess, shutil
          from pathlib import Path

          ROOT = Path(".").resolve()
          IMAGES = ROOT / "images"
          EXTS = {".jpg", ".jpeg", ".png", ".gif", ".webp", ".tif", ".tiff", ".bmp"}
          TS = time.strftime("%Y%m%d_%H%M%S")
          audit_txt = IMAGES / f"rename_audit_{TS}.txt"
          audit_csv = IMAGES / f"rename_audit_{TS}.csv"

          # Pattern to extract timestamp-like strings (YYYYMMDD_HHMMSS or similar)
          TS_PATTERNS = [
              re.compile(r"(\d{8}_\d{6})"),    # 20251025_142015
              re.compile(r"(\d{6}_\d{6})"),    # 251025_142015
          ]

          def extract_timestamp(name):
              for pat in TS_PATTERNS:
                  m = pat.search(name)
                  if m:
                      ts = m.group(1)
                      # convert YYYYMMDD to YYMMDD if needed
                      if len(ts.split('_')[0]) == 8:
                          ts = ts[2:]  # trim to YYMMDD_HHMMSS
                      return ts
              return None

          moved = []
          unchanged = []
          renamed_count = 0

          for f in sorted(IMAGES.iterdir()):
              if not f.is_file() or f.suffix.lower() not in EXTS:
                  continue
              old_name = f.name
              ts = extract_timestamp(old_name)
              if not ts:
                  unchanged.append(f)
                  continue
              new_name = f"image_{ts}{f.suffix.lower()}"
              if old_name == new_name:
                  unchanged.append(f)
                  continue
              dest = f.parent / new_name
              if dest.exists():
                  # avoid overwriting; add incremental suffix
                  i = 1
                  while (f.parent / f"image_{ts}_{i}{f.suffix.lower()}").exists():
                      i += 1
                  dest = f.parent / f"image_{ts}_{i}{f.suffix.lower()}"
              try:
                  subprocess.run(["git", "mv", "-k", str(f), str(dest)],
                                 check=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
              except Exception:
                  shutil.move(str(f), str(dest))
              moved.append((old_name, dest.name))
              renamed_count += 1

          # write audit files
          lines = [
              f"RENAME AUDIT ({time.strftime('%Y-%m-%d %H:%M:%S UTC')})",
              f"Files scanned: {len(list(IMAGES.iterdir()))}",
              f"Renamed files: {renamed_count}",
              "",
              "Renamed files (old -> new):",
          ]
          for old,new in moved:
              lines.append(f"{old} -> {new}")
          lines.append("")
          lines.append(f"Unchanged files: {len(unchanged)}")
          for u in unchanged:
              lines.append(f"{u.name}")
          audit_txt.write_text("\n".join(lines), encoding="utf-8")

          with open(audit_csv, "w", newline="", encoding="utf-8") as f:
              w = csv.writer(f)
              w.writerow(["old_name", "new_name"])
              for old,new in moved:
                  w.writerow([old,new])

          print(f"✅ Renamed {renamed_count} files.")
          print(f"📝 Audit TXT: {audit_txt}")
          print(f"🗂️  Audit CSV: {audit_csv}")

          print(f"::set-output name=renamed::{renamed_count}")
          PYCODE

      - name: Commit and push changes
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          git add images/
          git commit -m "Rename images to image_YYMMDD_HHMMSS format" || echo "No changes"
          git push

      - name: Summary
        run: |
          echo "## Rename Images Audit" >> $GITHUB_STEP_SUMMARY
          echo "- Files renamed: ${{ steps.rename.outputs.renamed }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Audit files written to:** images/rename_audit_*.txt and images/rename_audit_*.csv" >> $GITHUB_STEP_SUMMARY
